[{"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/index.js":"1","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/reportWebVitals.js":"2","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/App.js":"3","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/colorTable/index.js":"4","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/ColorTable/index.js":"5","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/PopapLogin/index.js":"6","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/InfoCards/index.js":"7","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/assets/images.js":"8","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/HeaderMenu/index.js":"9","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/ItemCard/index.js":"10","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/StatusNetwork/index.js":"11","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/TitleRig/index.js":"12","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/HeaderTable/index.js":"13","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/actions/app.js":"14","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/constants/index.js":"15","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/store/index.js":"16","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/redusers/index.js":"17","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/redusers/user.js":"18","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/redusers/config.js":"19","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/redusers/rigs.js":"20","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/helpers/index.js":"21"},{"size":573,"mtime":1612964697128,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1612180426641,"results":"24","hashOfConfig":"23"},{"size":5109,"mtime":1613401301413,"results":"25","hashOfConfig":"23"},{"size":1029,"mtime":1612210318618,"results":"26","hashOfConfig":"27"},{"size":406,"mtime":1613386517261,"results":"28","hashOfConfig":"23"},{"size":1684,"mtime":1613311013924,"results":"29","hashOfConfig":"23"},{"size":413,"mtime":1612422019654,"results":"30","hashOfConfig":"23"},{"size":395,"mtime":1612463831698,"results":"31","hashOfConfig":"23"},{"size":1006,"mtime":1613099163424,"results":"32","hashOfConfig":"23"},{"size":3521,"mtime":1613373729855,"results":"33","hashOfConfig":"23"},{"size":810,"mtime":1612320318802,"results":"34","hashOfConfig":"23"},{"size":375,"mtime":1612276663920,"results":"35","hashOfConfig":"23"},{"size":306,"mtime":1612279917747,"results":"36","hashOfConfig":"23"},{"size":2768,"mtime":1613320122015,"results":"37","hashOfConfig":"23"},{"size":551,"mtime":1613306772499,"results":"38","hashOfConfig":"23"},{"size":577,"mtime":1613017633182,"results":"39","hashOfConfig":"23"},{"size":223,"mtime":1613219549332,"results":"40","hashOfConfig":"23"},{"size":995,"mtime":1613308137063,"results":"41","hashOfConfig":"23"},{"size":722,"mtime":1613202118189,"results":"42","hashOfConfig":"23"},{"size":3636,"mtime":1613227684555,"results":"43","hashOfConfig":"23"},{"size":3959,"mtime":1613400965587,"results":"44","hashOfConfig":"23"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2dms0m",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sv7s70",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/index.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/reportWebVitals.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/App.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/colorTable/index.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/ColorTable/index.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/PopapLogin/index.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/InfoCards/index.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/assets/images.js",["90"],"import cross from './images/cross.png';\nimport check from './images/check.png';\nimport info from './images/info.png';\nimport exit from './images/exit.png';\nimport profile from './images/profile.png';\nimport lock from './images/lock.png';\nimport mess from './images/mess.png';\nimport qr from './images/qr.png';\n\nexport default {\n  cross,\n  check,\n  info,\n  profile,\n  exit,\n  mess,\n  lock,\n  qr\n}","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/HeaderMenu/index.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/ItemCard/index.js",["91","92","93"],"import React from 'react';\nimport images from '../../assets/images';\nimport ColorTable from '../ColorTable/index';\nimport InfoCards from '../InfoCards/index';\nimport StatusNetwork from '../StatusNetwork/index';\nimport Moment from 'react-moment';\nimport { convertTimeBd, differentsTimeOff } from '../../helpers';\nimport style from './style.css';\n\nclass ItemCard extends React.Component {\n\n    render(){\n      const {\n        fill,\n        count,\n        arr_temp,\n        login,\n      } = this.props;\n      const objDiff = differentsTimeOff(convertTimeBd(fill.status === 'on' ? fill.last_online : fill.last_offline,fill.status === 'on' ? fill.online_time : fill.offline_time));\n      const lock = images.lock;\n      const mess = images.mess;\n      return (\n        <div className=\"itemWrapper\" style={{backgroundColor: fill.status === 'on' ? '' : `rgb(241,241,241)`}}>\n          <div className=\"rowItemRig\">\n            <div className=\"titleRig\">{`${fill.name_rig}_${count}`}</div>\n            <div className=\"infoRig\">token <img style={{ marginTop: '5px'}} src={lock} width={14} /> {fill.token}</div>\n            <div className=\"infoRig\">owner <img style={{ marginTop: '5px'}} src={mess} width={14} /> {login}</div>\n            <div className=\"wrapperVersion\">\n            <div className=\"table\" style={{backgroundColor:'rgb(42,101,166)',userSelect: 'none'}}>Config ver: 2</div>\n              <div style={{width: '10px', height: '10px'}} />\n            <div className=\"table\" style={{backgroundColor:'rgb(42,101,166)',userSelect: 'none'}}>Exe ver: 2</div>\n            </div>\n            <InfoCards name={fill.nameCards} />\n          </div>\n          <div className=\"rowItemRig\">\n            <div className=\"onlineWrapper\">\n              <StatusNetwork type={fill.status} />\n            </div>\n            <div className=\"statusWrapper\">\n              <div className=\"titleOnline\">{fill.status === 'on' ? `Online:` : `Offline`}</div>\n              <div className=\"timeOnline\">{`${objDiff.days} Days ${objDiff.hours} hours. ${objDiff.minutes} min. ${objDiff.seconds} sec. `}</div>\n            </div>\n            <div className=\"updateWrapper\">\n              <div className=\"titileUpdate\">Last update: </div>\n              <Moment format=\"YYYY-MM-DD HH:mm\" className=\"timeUpdate\" date={convertTimeBd(fill.last_update)} />\n              <Moment className=\"timeUpdate\" fromNow>{convertTimeBd(fill.last_update)}</Moment>\n            </div>\n          </div>\n          <div className=\"rowItemRig\">\n              <div className=\"colorWrapper\">\n                {\n                  arr_temp.map((item,i) => (\n                    <div key={i} style={{display: 'flex', flexDirection: 'row', marginBottom: '2px'}}>\n                      <div\n                        className=\"table\"\n                        style={{\n                          backgroundColor: fill.status === 'on' ? item <= 74 ? 'rgb(83,171,83)' : (item >= 75 && item < 80) ? 'rgb(230,161,60)':'rgb(210,60,60)' : 'rgb(165,158,147)',\n                          userSelect: 'none'\n                          }}>\n                        {'GPU'} {fill.status === 'on' ? item : `?-?-?-?`} C°\n                      </div>\n                      <div style={{width: '10px', height: '10px'}} />\n                      <ColorTable status={fill.status} count={fill.status === 'on' ? (item+7) : `?-?-?-?`} type=\"FANS\" />\n                     </div>\n                  ))\n                }\n              </div>\n          </div>\n        </div>\n      );\n    }\n}\nexport default ItemCard;","/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/StatusNetwork/index.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/TitleRig/index.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/components/HeaderTable/index.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/actions/app.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/constants/index.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/store/index.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/redusers/index.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/redusers/user.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/redusers/config.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/redux/redusers/rigs.js",[],"/Users/aleksandrgolovin/Documents/Developing/minerwatcher/src/helpers/index.js",["94","95"],"import moment from 'moment';\nimport axios from 'axios';\n\nexport const NowBDformat = moment(moment().add(7, 'hours').format(\"YYYY-MM-DD HH:mm\"))\n\nexport const getRndInteger = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) ) + min;\n}\n\nexport const generationTempArr = (toggle,temp_min,temp_max) => {\n  let arr = [];\n  for(let i=0 ;i < 6; i++) {\n    arr.push(toggle ? getRndInteger(temp_min,temp_max) : getRndInteger(60,75))\n  }\n  return arr\n}\n\nexport const convertSeconds = (time) => {\n  const milliseconds = time%1000;\n  const seconds     = parseInt(time=time/1000)%60;\n  const minutes     = parseInt(time=time/60)%60;\n  const hours       = parseInt(time=time/60)%24;\n  const days        =  parseInt(time=time/24);\n  return {\n    seconds,\n    minutes,\n    hours,\n    days,\n  }\n}\n\nexport const differentsTimeOff = (now,last) => {\n  return convertSeconds(moment(last).diff(now));\n}\n\nexport const convertTimeBd = (time) => {\n  return moment(time).subtract(7,'hours').format(\"YYYY-MM-DD HH:mm\");\n}\n\nexport const getWorkedRig = (arr) => {\n  let result =[];\n  let worked = 0;\n  let off = 0;\n  for(var i = 0; i < arr.length; i++){\n    arr[i].status === 'on' ? worked++ : off++  ;\n  }\n  result.push(worked);\n  result.push(arr.length);\n  return result;\n}\n\n\nexport const sortStatusCards = (cards) => {\n  const offCardsArray = [];\n  const onCardsArray = [];\n  cards.map(card => {\n    if (card.status === \"on\") {\n      onCardsArray.push({\n        id: card.id,\n        offline_time: convertTimeBd(card.offline_time),\n        last_update: convertTimeBd(card.last_update),\n        online_time: convertTimeBd(card.online_time),\n        answer_last: [{\n          type: \"lastupdate\",\n          count:differentsTimeOff(convertTimeBd(card.online_time))\n        }, {\n          type: \"on\",\n          count:differentsTimeOff(convertTimeBd(card.online_time))\n        }, {\n          type: \"off\",\n          count:differentsTimeOff(convertTimeBd(card.online_time))\n        }]\n      });\n    } else {\n      offCardsArray.push({\n        id: card.id,\n        offline_time: convertTimeBd(card.offline_time),\n        last_update: convertTimeBd(card.last_update),\n        online_time: convertTimeBd(card.online_time),\n        answer_last: [{\n          type: \"lastupdate\",\n          count:differentsTimeOff(convertTimeBd(card.offline_time))\n        }, {\n          type: \"on\",\n          count:differentsTimeOff(convertTimeBd(card.offline_time))\n        }, {\n          type: \"off\",\n          diff:differentsTimeOff(convertTimeBd(card.offline_time)),\n          time: NowBDformat //формат для базы плюс семь нормально отображается в базе\n        }]\n      });\n    }\n  });\n  return {\n    offCardsArray,\n    onCardsArray\n  }\n}\n\nexport const proccesingArrTimeToCards = (rigs,config,fun) => {\n  let last_update = null;\n  let offline_time = null;\n  let answer = {}\n  rigs.map(async (item,i) => {\n    if (config.toogle_total_temp === \"true\") {\n      item.temp_arr = generationTempArr(config.toogle_total_temp,config.total_temp_min,config.total_temp_max);\n    } else {\n      item.temp_arr = generationTempArr(config.toogle_total_temp,item.temp_min,item.temp_max);\n    }\n\n    if(item.status === 'off') {\n      last_update = moment(item.last_online).subtract(getRndInteger(1,3),'minutes');\n      offline_time = NowBDformat;\n      answer = {\n        temp_arr: rigs[i].temp_arr.toString(),\n        last_update,\n        offline_time,\n        last_online: moment(item.offline_time).subtract(getRndInteger(1,3),'minutes')\n      }\n    } else {\n      last_update = moment(NowBDformat).subtract(getRndInteger(1,3),'minutes');\n      answer = {\n        temp_arr: rigs[i].temp_arr.toString(),\n        last_update,\n        online_time: NowBDformat,\n        last_offline: moment(item.last_online).subtract(getRndInteger(1,3),'minutes')\n      }\n    }\n    \n    await axios.put(`https://minerwatcher.ru/api/putRig?id=${i+1}`, answer)\n  })\n\n  return rigs;\n}\n",{"ruleId":"96","severity":1,"message":"97","line":10,"column":1,"nodeType":"98","endLine":19,"endColumn":2},{"ruleId":"99","severity":1,"message":"100","line":8,"column":8,"nodeType":"101","messageId":"102","endLine":8,"endColumn":13},{"ruleId":"103","severity":1,"message":"104","line":26,"column":44,"nodeType":"105","endLine":26,"endColumn":101},{"ruleId":"103","severity":1,"message":"104","line":27,"column":44,"nodeType":"105","endLine":27,"endColumn":101},{"ruleId":"99","severity":1,"message":"106","line":19,"column":9,"nodeType":"101","messageId":"102","endLine":19,"endColumn":21},{"ruleId":"107","severity":1,"message":"108","line":56,"column":18,"nodeType":"109","messageId":"110","endLine":56,"endColumn":20},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'style' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'milliseconds' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]