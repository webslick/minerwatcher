{"ast":null,"code":"import _regeneratorRuntime from\"/home/minerwatcher/minerwatcher/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/minerwatcher/minerwatcher/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import moment from'moment';import axios from'axios';export var NowBDformat=moment(moment().add(7,'hours').format(\"YYYY-MM-DD HH:mm\"));export var getRndInteger=function getRndInteger(min,max){return Math.floor(Math.random()*(max-min+1))+min;};export var generationTempArr=function generationTempArr(toggle,temp_min,temp_max){var arr=[];for(var i=0;i<6;i++){arr.push(toggle?getRndInteger(temp_min,temp_max):getRndInteger(60,75));}return arr;};export var convertSeconds=function convertSeconds(time){var milliseconds=time%1000;var seconds=parseInt(time=time/1000)%60;var minutes=parseInt(time=time/60)%60;var hours=parseInt(time=time/60)%24;var days=parseInt(time=time/24);return{seconds:seconds,minutes:minutes,hours:hours,days:days};};export var differentsTimeOff=function differentsTimeOff(now,last){return convertSeconds(moment(last).diff(now));};export var convertTimeBd=function convertTimeBd(time){return moment(time).subtract(7,'hours').format(\"YYYY-MM-DD HH:mm\");};export var getWorkedRig=function getWorkedRig(arr){var result=[];var worked=0;var off=0;for(var i=0;i<arr.length;i++){arr[i].status==='on'?worked++:off++;}result.push(worked);result.push(arr.length);return result;};export var sortStatusCards=function sortStatusCards(cards){var offCardsArray=[];var onCardsArray=[];cards.map(function(card){if(card.status===\"on\"){onCardsArray.push({id:card.id,offline_time:convertTimeBd(card.offline_time),last_update:convertTimeBd(card.last_update),online_time:convertTimeBd(card.online_time),answer_last:[{type:\"lastupdate\",count:differentsTimeOff(convertTimeBd(card.online_time))},{type:\"on\",count:differentsTimeOff(convertTimeBd(card.online_time))},{type:\"off\",count:differentsTimeOff(convertTimeBd(card.online_time))}]});}else{offCardsArray.push({id:card.id,offline_time:convertTimeBd(card.offline_time),last_update:convertTimeBd(card.last_update),online_time:convertTimeBd(card.online_time),answer_last:[{type:\"lastupdate\",count:differentsTimeOff(convertTimeBd(card.offline_time))},{type:\"on\",count:differentsTimeOff(convertTimeBd(card.offline_time))},{type:\"off\",diff:differentsTimeOff(convertTimeBd(card.offline_time)),time:NowBDformat//формат для базы плюс семь нормально отображается в базе\n}]});}});return{offCardsArray:offCardsArray,onCardsArray:onCardsArray};};export var proccesingArrTimeToCards=function proccesingArrTimeToCards(rigs,config,fun){var last_update=null;var offline_time=null;var answer={};rigs.map(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(item,i){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(config.toogle_total_temp===\"true\"){item.temp_arr=generationTempArr(config.toogle_total_temp,config.total_temp_min,config.total_temp_max);}else{item.temp_arr=generationTempArr(config.toogle_total_temp,item.temp_min,item.temp_max);}if(item.status==='off'){last_update=moment(item.last_online).subtract(getRndInteger(1,3),'minutes');offline_time=NowBDformat;answer={temp_arr:rigs[i].temp_arr.toString(),last_update:last_update,offline_time:offline_time,last_online:moment(item.offline_time).subtract(getRndInteger(1,3),'minutes')};}else{last_update=moment(NowBDformat).subtract(getRndInteger(1,3),'minutes');answer={temp_arr:rigs[i].temp_arr.toString(),last_update:last_update,online_time:NowBDformat,last_offline:moment(item.last_online).subtract(getRndInteger(1,3),'minutes')};}_context.next=4;return axios.put(\"/api/putRig?id=\".concat(i+1),answer);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}());return rigs;};","map":{"version":3,"sources":["/home/minerwatcher/minerwatcher/client/src/helpers/index.js"],"names":["moment","axios","NowBDformat","add","format","getRndInteger","min","max","Math","floor","random","generationTempArr","toggle","temp_min","temp_max","arr","i","push","convertSeconds","time","milliseconds","seconds","parseInt","minutes","hours","days","differentsTimeOff","now","last","diff","convertTimeBd","subtract","getWorkedRig","result","worked","off","length","status","sortStatusCards","cards","offCardsArray","onCardsArray","map","card","id","offline_time","last_update","online_time","answer_last","type","count","proccesingArrTimeToCards","rigs","config","fun","answer","item","toogle_total_temp","temp_arr","total_temp_min","total_temp_max","last_online","toString","last_offline","put"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport axios from 'axios';\n\nexport const NowBDformat = moment(moment().add(7, 'hours').format(\"YYYY-MM-DD HH:mm\"))\n\nexport const getRndInteger = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) ) + min;\n}\n\nexport const generationTempArr = (toggle,temp_min,temp_max) => {\n  let arr = [];\n  for(let i=0 ;i < 6; i++) {\n    arr.push(toggle ? getRndInteger(temp_min,temp_max) : getRndInteger(60,75))\n  }\n  return arr\n}\n\nexport const convertSeconds = (time) => {\n  const milliseconds = time%1000;\n  const seconds     = parseInt(time=time/1000)%60;\n  const minutes     = parseInt(time=time/60)%60;\n  const hours       = parseInt(time=time/60)%24;\n  const days        =  parseInt(time=time/24);\n  return {\n    seconds,\n    minutes,\n    hours,\n    days,\n  }\n}\n\nexport const differentsTimeOff = (now,last) => {\n  return convertSeconds(moment(last).diff(now));\n}\n\nexport const convertTimeBd = (time) => {\n  return moment(time).subtract(7,'hours').format(\"YYYY-MM-DD HH:mm\");\n}\n\nexport const getWorkedRig = (arr) => {\n  let result =[];\n  let worked = 0;\n  let off = 0;\n  for(var i = 0; i < arr.length; i++){\n    arr[i].status === 'on' ? worked++ : off++  ;\n  }\n  result.push(worked);\n  result.push(arr.length);\n  return result;\n}\n\n\nexport const sortStatusCards = (cards) => {\n  const offCardsArray = [];\n  const onCardsArray = [];\n  cards.map(card => {\n    if (card.status === \"on\") {\n      onCardsArray.push({\n        id: card.id,\n        offline_time: convertTimeBd(card.offline_time),\n        last_update: convertTimeBd(card.last_update),\n        online_time: convertTimeBd(card.online_time),\n        answer_last: [{\n          type: \"lastupdate\",\n          count:differentsTimeOff(convertTimeBd(card.online_time))\n        }, {\n          type: \"on\",\n          count:differentsTimeOff(convertTimeBd(card.online_time))\n        }, {\n          type: \"off\",\n          count:differentsTimeOff(convertTimeBd(card.online_time))\n        }]\n      });\n    } else {\n      offCardsArray.push({\n        id: card.id,\n        offline_time: convertTimeBd(card.offline_time),\n        last_update: convertTimeBd(card.last_update),\n        online_time: convertTimeBd(card.online_time),\n        answer_last: [{\n          type: \"lastupdate\",\n          count:differentsTimeOff(convertTimeBd(card.offline_time))\n        }, {\n          type: \"on\",\n          count:differentsTimeOff(convertTimeBd(card.offline_time))\n        }, {\n          type: \"off\",\n          diff:differentsTimeOff(convertTimeBd(card.offline_time)),\n          time: NowBDformat //формат для базы плюс семь нормально отображается в базе\n        }]\n      });\n    }\n  });\n  return {\n    offCardsArray,\n    onCardsArray\n  }\n}\n\nexport const proccesingArrTimeToCards = (rigs,config,fun) => {\n  let last_update = null;\n  let offline_time = null;\n  let answer = {}\n  rigs.map(async (item,i) => {\n    if (config.toogle_total_temp === \"true\") {\n      item.temp_arr = generationTempArr(config.toogle_total_temp,config.total_temp_min,config.total_temp_max);\n    } else {\n      item.temp_arr = generationTempArr(config.toogle_total_temp,item.temp_min,item.temp_max);\n    }\n\n    if(item.status === 'off') {\n      last_update = moment(item.last_online).subtract(getRndInteger(1,3),'minutes');\n      offline_time = NowBDformat;\n      answer = {\n        temp_arr: rigs[i].temp_arr.toString(),\n        last_update,\n        offline_time,\n        last_online: moment(item.offline_time).subtract(getRndInteger(1,3),'minutes')\n      }\n    } else {\n      last_update = moment(NowBDformat).subtract(getRndInteger(1,3),'minutes');\n      answer = {\n        temp_arr: rigs[i].temp_arr.toString(),\n        last_update,\n        online_time: NowBDformat,\n        last_offline: moment(item.last_online).subtract(getRndInteger(1,3),'minutes')\n      }\n    }\n    \n    await axios.put(`/api/putRig?id=${i+1}`, answer)\n  })\n\n  return rigs;\n}\n"]},"metadata":{},"sourceType":"module"}